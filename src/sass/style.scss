@import 'normalize.css';

// Fonts
$font-system: (
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    "Roboto",
    "Oxygen",
    "Ubuntu",
    "Cantarell",
    "Fira Sans",
    "Droid Sans",
    "Helvetica Neue",
    sans-serif,
);
$font-serif: ("Georgia",
    "Times",
    "Times New Roman",
    serif,
);

// Variables
$base-font-size: 87.5; // Gets used as %, converts to 14px
$line-height: 1.5;
$base: ($base-font-size / 100); // We'll need this for some calculations

// Modular scale
$ratio: 1.2; // Minor Third

// pow and ms functions 
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number; //Multiply by $number if exponent less than zero
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number; //Divide by $number if exponent less than zero
    }
  }

  @return $value;
}

@function ms($value, $ms-ratio: $ratio, $ms-base: $base){
  $size: pow($ms-ratio, $value) * $ms-base;
  @return #{ $size + "rem" };
}

// Vertical rhythm mixins
@mixin line-height($number) {
  line-height: #{ $number * $line-height + 'rem'};
}

@mixin margin-top($number) {
  margin-top: #{ $number * $line-height + 'rem'};
}

@mixin margin-bottom($number) {
  margin-bottom: #{ $number * $line-height + 'rem'};
}

html {
  font-size: #{$base-font-size + '%'}; // 87.5% = 14 pixels
  font-family: $font-system;
  padding-left: 3%; // Good enough for now
  color: #333;
}

// Set line-height and margins for all elements
* {
  @include line-height(1);
  @include margin-bottom(1);
  @include margin-top(0);
}

// [ h1: font-size: [x value from scale], line-height: 3 × 21px, margin-top: 2 × 21px, margin-bottom: 1 × 21px ]
$headings: (
  h1: (8, 3, 2, 1),
  h2: (4, 1.5, 2, 1),
  h3: (3, 1, 1, 0),
  h4: (2, 1, 1, 0),
  h5: (1, 1, 1, 0),
  h6: (0, 1, 1, 0)
);

// Set line-heights and margins for headings
@each $heading, $properties in $headings {
  #{$heading} {
    font-size: ms(nth($properties, 1));
    @include line-height(nth($properties, 2));
    @include margin-top(nth($properties, 3));
    @include margin-bottom(nth($properties, 4));
  }
}

article {
  max-width: 45em; // Good enough for now
  
  h1 {
    color: #F7412D;
    font-style: normal;
    max-width: 13em;
  }
  
  h1, h2, h3, h4, h5, h6 {
    font-weight: 500;
  }
  
  p {
    max-width: 33em;
    @include margin-top(1);
  }
}

// Apply the baseline grid as background
.grid {
  background-image: linear-gradient(to bottom, hsla(200, 100%, 50%, 0.3) 1px, transparent 1px);
  background-repeat: repeat;
  background-position: left top;
  background-size: 100% #{($base-font-size / 100 * 16) * $line-height + "px"};
}

.double-grid {
  @extend .grid;
  background-image: linear-gradient(to bottom, hsla(200, 100%, 50%, 0.3) 1px, transparent 1px), linear-gradient(to bottom, hsla(200, 100%, 50%, 0.3) 1px, transparent 1px, transparent #{ 0.5 * ($base-font-size / 100 * 16) * $line-height + "px"}, hsla(200, 100%, 50%, 0.2) #{ 0.5 * ($base-font-size / 100 * 16) * $line-height + "px"}, transparent #{ 0.5 * ($base-font-size / 100 * 16) * $line-height + 1 + "px"}, transparent #{($base-font-size / 100 * 16) * $line-height + "px"});
}